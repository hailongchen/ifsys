/** * Created by marszed on 16/3/8. */define(function(require, exports, module){	var template = require('template'),		$ = require('jquery'),		layer = require('layer'),		global = require('global'),		GiGoldTool = new global.GiGoldTool(),		common = require('common'),		GiGoldPay = new common.GiGoldPay(),		$slider = $('#slider'),		getConstFields = [],//持久缓存数据源信息!!!		cacheDetail = [];	var getInserCharLock = false,//占位符锁		useInterfaceLock = false,//请求左侧菜单栏接口信息锁		useCaseLock = false,//测试用例锁		moduleNameLock = false,//依赖名锁		sendCaseLock = false,//新增用例锁		caseDataLock = false,//获取用例锁		interfaceInfoLock = false,//接口基本信息锁		moduleLock = false;//报文依赖锁	var interfaceDataCache = [];//接口信息缓存	//左侧菜单栏伸缩交互	$slider.on('click','#menuClose',function(){		$(this).toggleClass('menuExpand');		$slider.toggleClass('sliderLf');		$('#useCaseDetail').toggleClass('ml44');	});	//上一页,下一页	$slider.on('click','.prePage, .nextPage',function(){		var page = $(this).attr('page');		GiGoldTool.cookie('pagenum',page,{expires:365});		sliderInterface.updateInterfaceByPage(page);	});	//点击接口名,展开测试用例	$slider.on('click','.interfaceMsg',function(){		var $this = $(this);		$this.next('.ct-box').toggleClass('ht-auto').parents('.interfaceChild').siblings().find('.ct-box').removeClass('ht-auto');		var interfaceId = $this.find('.id').html()-0;		$('.ct-box').find('p').removeClass('ct-active');		if(interfaceId){			$('#addUsecase').attr('ifId',interfaceId);			//清除请求参数,接口依赖,报文依赖			sliderInterface.cleanCaseDome();			//读取缓存接口信息			getCacheData(interfaceId);		}	});	//测试用例选择,加载相应用例详情模版(请求响应模块+报文依赖)	$slider.on('click','.interfaceChild > .ct-box > p',function(){		var $this = $(this),			caseId = $this.attr('caseid')-0,			interfaceId = $this.attr('interfaceid')-0;		$(this).addClass('ct-active').siblings('p').removeClass('ct-active');		if(caseId){			$('#addRelateModule').attr('mockid',caseId);			sliderInterface.getCaseData({				data: {					id: caseId+''				}			});		}	});	//全局搜索	$slider.on('click','#clearALl',function(){		GiGoldTool.cookie('proid','0');		GiGoldTool.cookie('sysid','0');		GiGoldTool.cookie('pagenum','1');		window.location.reload();	});	//清除原有接口测试用例相关信息	intInfoInit.prototype.cleanCaseDome = function(){		$('#interfaceModuleCt, #require, #response, #msgModule,#useCaseList').empty();	};	//读取缓存接口数据	function getCacheData(interfaceId){		var cacheData = {};		//优先读取缓存的接口基本信息		for(var i = 0, len = interfaceDataCache.length; i < len; i++){			var temp = interfaceDataCache[i].list;			if(temp.length > 0){				for(var j = 0, _len = temp.length; j < _len; j++){					if(temp[j].id == interfaceId){						cacheData = temp[j];						break;					}				}			}		}		renderBaseInterfaceAndRes(cacheData);		//缓存数据源信息		if(getConstFields.length <= 0){			sliderInterface.getInsertChar();		}	}	function intInfoInit(){}	//获取接口列表信息,页码信息,测试用例信息	intInfoInit.prototype.updateInterface = function(obj){		if(!useInterfaceLock){			$slider.addClass('loading');			useInterfaceLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit()+"/autotest/autotest/getallifsys.do",				"data": obj.data || {pageNum: 1},				"onSuccess":function(data){					if (data.rspCd == "00000") {						useInterfaceLock = false;						$slider.removeClass('loading');						interfaceDataCache.push(data.pageInfo);						renderByJson(data.pageInfo);					}else{						GiGoldPay.cancleLock(useInterfaceLock);					}				},				'onError': function(data){					GiGoldPay.cancleLock(useInterfaceLock);				}			});		}	};	//新增用例信息	intInfoInit.prototype.sendUseCase = function(obj){		if(!sendCaseLock){			sendCaseLock = true;			GiGoldPay.ajaxHandler({				"url": GiGoldPay.ipBullShit()+"/autotest/autotest/updateifsysmock.do",				"data": obj,				"onSuccess":function(_data) {					if (_data.rspCd == "00000") {						sendCaseLock = false;						layer.msg('保存新增用例信息成功');						//填充新增数据						for(var i = 0, len = interfaceDataCache.length; i < len; i++){							var temp = interfaceDataCache[i].list;							if(temp.length > 0){								for(var j = 0, _len = temp.length; j < _len; j++){									if(temp[j].id == obj.ifId){										temp[j].mockList.push(_data.ifSysMock);										break;									}								}							}						}						//清空用例信息填写文本区域						$('#newCaseList').empty();						//复原新增测试用例状态						var html = '<p interfaceid='+_data.ifSysMock.ifId+' caseid='+_data.ifSysMock.id+' title='+_data.ifSysMock.caseName+'>' +							'<span class="text-danger">'+_data.ifSysMock.id+'</span>'+_data.ifSysMock.caseName+'</p>';						var $li = $('#interfaceInfo').find('.interfaceChild');						for(var i = 0, len = $li.length; i< len; i++){							var $temp = $($li[i]);							if($temp.attr('ifId') == obj.ifId){								$temp.find('.ct-box').append(html);								$temp.find('.ct-box > p:last-child').click();								break;							}						}					} else {						layer.msg('保存新增用例信息失败');						GiGoldPay.cancleLock(sendCaseLock);					}				},				"onError":function(data) {					layer.msg('保存新增用例信息失败');					GiGoldPay.cancleLock(sendCaseLock);				}			});		}	};	//获取接口基本信息 invalid	intInfoInit.prototype.getInterfaceInfo = function(obj){		if(!interfaceInfoLock){			interfaceInfoLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit()+"/autotest/autotest/queryInterFaceById.do",				"data": obj.data || {},				"onSuccess":function(data){					if (data.rspCd == "00000") {						interfaceInfoLock = false;						renderBaseInterfaceAndRes(data);						//将接口基本信息缓存						for(var i = 0, len = interfaceDataCache.length; i < len; i++){							var temp = interfaceDataCache[i].list;							for(var j = 0, _len = temp.length; j < _len; j++){								if(temp[j].id == data.interFaceInfo.id){									temp[j].interFaceInfo = data.interFaceInfo;									temp[j].returnCodeList = data.returnCodeList;									break;								}							}						}					} else {						GiGoldPay.cancleLock(interfaceInfoLock);					}				},				'onError': function(data){					GiGoldPay.cancleLock(interfaceInfoLock);				}			});		}	};	//数据源信息永久缓存	intInfoInit.prototype.getInsertChar = function(){		if(!getInserCharLock ){			getInserCharLock = true;			GiGoldPay.ajaxHandler({				"url": GiGoldPay.ipBullShit()+"/autotest/autotest/getConstFields.do",				"data": {},				"onSuccess":function(_data) {					if (_data.rspCd == "00000") {						getConstFields = _data.dataes;						getInserCharLock = false;					} else {						GiGoldPay.cancleLock(getInserCharLock);					}				},				"onError":function(data) {					GiGoldPay.cancleLock(getInserCharLock);				}			});		}	};	//获取测试用例信息 invalid	intInfoInit.prototype.updateUseCase = function(obj){		if(!useCaseLock){			useCaseLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit()+"/autotest/autotest/getifsysmockbyifid.do",				"data": obj.data || {},				"onSuccess":function(data){					if (data.rspCd == "00000") {						var interFaceArray = data.interFaceInfo,							inteFaceNum = interFaceArray.mockList ? interFaceArray.mockList.length : 0,							inteFaceHtml = '';						//将用例具体信息缓存						cacheDetail.push(interFaceArray);						for(var i = 0; i < inteFaceNum; i++){							inteFaceHtml += '<p interFaceId='+interFaceArray.mockList[i].ifId+' caseId='+interFaceArray.mockList[i].id+' title='+interFaceArray.mockList[i].caseName+'>'+interFaceArray.mockList[i].caseName+'</p>';						}						obj.parentDom.find('.num').html('('+data.interFaceInfo.mockList.length+')');						obj.parentDom.next('.ct-box').toggleClass('ht-auto').html(inteFaceHtml);						useCaseLock = false;					}else{						GiGoldPay.cancleLock(useCaseLock);					}				},				'onError': function(data){					GiGoldPay.cancleLock(useCaseLock);				}			});		}	};	//获取下一页或者上一页内容	intInfoInit.prototype.updateInterfaceByPage = function(page){		if(page){			sliderInterface.cleanCache();			sliderInterface.cleanCaseDome();			$('#hdLeftBox').empty();			sliderInterface.updateInterface({				data:{					ifName: "",					ifSysId: $slider.find('.chooseSysVal').attr('sysid') || 0,					pageNum: page - 0,					ifProId: $slider.find('.chooseProVal').attr('proid') || 0				}			});		}	};	//获取报文依赖关系 invalid	intInfoInit.prototype.upateModule = function(obj){		if(!moduleLock){			moduleLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit()+"/autotest/autotest/queryFieldRefer.do",				"data": obj.data || {},				"onSuccess":function(data){					if (data.rspCd == "00000") {						moduleLock = false;						var tempData = data;						//waring不推荐这种方式 嵌套取依赖接口信息start						if(!moduleNameLock){							obj.data.mockId = obj.data.mockid;							GiGoldPay.ajaxHandler({								"url": obj.url || GiGoldPay.ipBullShit()+"/autotest/getreferList.do",								"data": obj.data || {},								"onSuccess":function(_data) {									if (_data.rspCd == "00000") {										moduleNameLock = false;										//拼接已勾选依赖名										for(var i = 0, len = data.list.length; i < len; i++){											for(var j = 0, _len = _data.list.length; j < _len; j++){												if(data.list[i].ref_mock_id == _data.list[j].refMockId){													data.list[i].relateName = _data.list[j].ifName;													break;												}											}										}										tempData.moduleList = _data.list;										console.log(tempData);										//渲染报文依赖										var moduleContent = template('msgContent', tempData);										document.getElementById('msgModule').innerHTML = moduleContent;										//渲染接口依赖										var html = template('interfaceModule', _data);										document.getElementById('interfaceModuleCt').innerHTML = html;									} else {										GiGoldPay.cancleLock(moduleNameLock);									}								},								"onError":function(data) {									GiGoldPay.cancleLock(moduleNameLock);								}							});						}						//嵌套取依赖接口信息end					} else {						GiGoldPay.cancleLock(moduleLock);					}				},				'onError': function(data){					GiGoldPay.cancleLock(moduleLock);				}			});		}	};	//获取用例信息	intInfoInit.prototype.getCaseData =  function(obj){		if(!caseDataLock){			caseDataLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit()+"/autotest/autotest/getMockById.do",				"data": obj.data || {},				"onSuccess":function(_data) {					if (_data.rspCd == "00000") {						caseDataLock = false;						//拼接已勾选依赖名						for(var i = 0, len = _data.mockFieldReferList.length; i < len; i++){							for(var j = 0, _len = _data.mockReferList.length; j < _len; j++){								if(_data.mockFieldReferList[i].ref_mock_id == _data.mockReferList[j].refMockId){									_data.mockFieldReferList[i].relateName = _data.mockReferList[j].ifName;									break;								}							}						}						_data.moduleList = _data.mockReferList;						//渲染报文依赖						var moduleContent = template('msgContent', _data);						document.getElementById('msgModule').innerHTML = moduleContent;						//渲染接口依赖						var html = template('interfaceModule', _data);						document.getElementById('interfaceModuleCt').innerHTML = html;						_data.mock.getConstFields = getConstFields;						//渲染请求头模版						var reqArea = template('reqArea',_data.mock);						document.getElementById('require').innerHTML = reqArea;						//渲染响应头模版						var resArea = template('resArea', _data.mock);						document.getElementById('response').innerHTML = resArea;						//渲染用例信息						var caseArea = template('useCaseListBox', _data.mock);						document.getElementById('useCaseList').innerHTML = caseArea;						//json格式化						GiGoldTool.jsonBeautify(document.getElementById('resJsonBox'));						GiGoldTool.jsonBeautify(document.getElementById('reqJsonBox'));					} else {						GiGoldPay.cancleLock(caseDataLock);					}				},				"onError":function(data) {					GiGoldPay.cancleLock(caseDataLock);				}			});		}	};	//暴露缓存数据	intInfoInit.prototype.interfaceDataCache = interfaceDataCache;	//清除缓存数据	intInfoInit.prototype.cleanCache = function(){		cacheDetail = [];		interfaceDataCache = [];	};	//接口列表信息模板渲染	function renderByJson(data){		var interfaceHtml = '<ul class="interfaceList">'+			'{{ each data.list as obj i}}'+			'<li class="interfaceChild " ifId="{{obj.id}}">'+			'<div class="interfaceMsg">'+			'<div class="id">{{obj.id}}</div>'+			'<p class="msg" title="{{obj.ifName}}">{{obj.ifName}}</p>'+			'<div class="num">({{obj.mockidList.length}})</div>'+			'</div>'+			'<div class="ct-box">' +			'{{each obj.mockidList as temp j}}'+			'<p interFaceId={{obj.id}} caseId={{temp.id}} title={{temp.caseName}}><span class="text-danger">{{temp.id}}</span>{{temp.caseName}}</p>'+			'{{/each}}'+			'</div>'+			'</li>'+			'{{/each}}'+			'</ul>'+			'<div id="pageBox">'+			'<div class="page-guide">' +			'<button id="clearALl" type="button" class="open-box active btn btn-success fl">全局搜索</button>'+			'当前页码<span>{{data.pageNum}}</span>,总页数<span>{{data.pages}}</span>'+			'</div>'+			'{{ if data.hasPreviousPage}}'+			'<button type="button" class="prePage btn btn-default btn-block btn-success" title="上一页" page="{{data.prePage}}">上一页</button>'+			'{{ else if !data.hasPreviousPage}}'+			'<button type="button" class="prePage btn btn-default btn-block" disabled="disabled" title="第一页">第一页</button>'+			'{{/if}}'+			'{{ if data.hasNextPage}}'+			'<button type="button" class="nextPage btn btn-default btn-block btn-success" title="下一页" page="{{data.nextPage}}">下一页</button>'+			'{{ else if !data.hasNextPage}}'+			'<button type="button" class="nextPage btn btn-default btn-block"  disabled="disabled" title="最后一页">最后一页</button>'+			'{{/if}}'+			'</div>';		var render = template.compile(interfaceHtml);		var html = render({			data: data		});		document.getElementById('interfaceInfo').innerHTML = html;	}	//接口基本信息,响应吗信息渲染	function renderBaseInterfaceAndRes(data){		var html = template('baseInterfaceRes', data);		document.getElementById('hdLeftBox').innerHTML = html;	}	//左侧侧栏接口列表初始化	var sliderInterface = new intInfoInit();	sliderInterface.updateInterface({		'data': {			ifName: "",			ifProId: GiGoldTool.cookie('proid') || 0,			ifSysId: GiGoldTool.cookie('sysid') || 0,			pageNum: GiGoldTool.cookie('pagenum') || 0		}	})	//暴露接口,以供后续局部刷新	module.exports = {		intInfoInit: intInfoInit	};});